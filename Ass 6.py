# -*- coding: utf-8 -*-
"""Untitled89.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11GfbJobpcg0k2OjgJ_65rvatc3Z530Tk
"""

import random
from functools import reduce

# Deterministic Selection: Median of Medians
def deterministic_select(arr, k):
    def median_of_medians(array):
        if len(array) <= 5:
            return sorted(array)[len(array) // 2]  # Return the median of small groups

        # Divide into groups of 5
        groups = [array[i:i + 5] for i in range(0, len(array), 5)]
        medians = [sorted(group)[len(group) // 2] for group in groups]

        # Recursively find the median of the medians
        return median_of_medians(medians)

    if len(arr) == 1:
        return arr[0]

    pivot = median_of_medians(arr)

    # Partition the array based on the pivot
    low = [x for x in arr if x < pivot]
    high = [x for x in arr if x > pivot]
    pivot_count = len(arr) - len(low) - len(high)

    if k < len(low):
        return deterministic_select(low, k)
    elif k < len(low) + pivot_count:
        return pivot  # Pivot is the k-th smallest
    else:
        return deterministic_select(high, k - len(low) - pivot_count)

# Randomized Selection: Quickselect
def randomized_select(arr, k):
    def quickselect(array, k):
        pivot = random.choice(array)

        # Partition around the pivot
        low = [x for x in array if x < pivot]
        high = [x for x in array if x > pivot]
        pivot_count = len(array) - len(low) - len(high)

        if k < len(low):
            return quickselect(low, k)
        elif k < len(low) + pivot_count:
            return pivot  # Pivot is the k-th smallest
        else:
            return quickselect(high, k - len(low) - pivot_count)

    return quickselect(arr, k)

# Example Usage
if __name__ == "__main__":
    # Input array and k
    arr = [10, 4, 6, 2, 1, 9, 3, 7, 5, 8]
    k = 4  # Find the 4th smallest element

    print("Deterministic Selection:", deterministic_select(arr, k))
    print("Randomized Selection:", randomized_select(arr, k))

    # Empirical testing on various inputs
    import time
    def test_algorithms():
        sizes = [10, 100, 1000, 10000]
        for size in sizes:
            test_array = [random.randint(1, 100000) for _ in range(size)]
            test_k = size // 2

            # Deterministic Selection
            start_time = time.time()
            deterministic_select(test_array, test_k)
            deterministic_time = time.time() - start_time

            # Randomized Selection
            start_time = time.time()
            randomized_select(test_array, test_k)
            randomized_time = time.time() - start_time

            print(f"Array Size: {size} | Deterministic Time: {deterministic_time:.6f}s | Randomized Time: {randomized_time:.6f}s")

    # Run the test
    test_algorithms()

# Array Implementation
class MyArray:
    def __init__(self, size):
        self.array = [None] * size
        self.size = size
        self.count = 0  # Number of elements in the array

    def insert(self, index, value):
        if self.count >= self.size or index > self.count:
            print("Error: Insertion not possible")
            return
        for i in range(self.count, index, -1):
            self.array[i] = self.array[i - 1]
        self.array[index] = value
        self.count += 1

    def delete(self, index):
        if index < 0 or index >= self.count:
            print("Error: Deletion not possible")
            return
        for i in range(index, self.count - 1):
            self.array[i] = self.array[i + 1]
        self.array[self.count - 1] = None
        self.count -= 1

    def access(self, index):
        if index < 0 or index >= self.count:
            print("Error: Access not possible")
            return None
        return self.array[index]

    def display(self):
        print([self.array[i] for i in range(self.count)])


# Matrix Implementation
class MyMatrix:
    def __init__(self, rows, cols):
        self.rows = rows
        self.cols = cols
        self.matrix = [[0 for _ in range(cols)] for _ in range(rows)]

    def insert(self, row, col, value):
        if row >= self.rows or col >= self.cols:
            print("Error: Invalid position")
            return
        self.matrix[row][col] = value

    def access(self, row, col):
        if row >= self.rows or col >= self.cols:
            print("Error: Invalid position")
            return None
        return self.matrix[row][col]

    def display(self):
        for row in self.matrix:
            print(row)


# Stack Implementation (using Linked List)
class StackNode:
    def __init__(self, value):
        self.value = value
        self.next = None


class MyStack:
    def __init__(self):
        self.top = None

    def push(self, value):
        new_node = StackNode(value)
        new_node.next = self.top
        self.top = new_node

    def pop(self):
        if self.is_empty():
            print("Error: Stack is empty")
            return None
        value = self.top.value
        self.top = self.top.next
        return value

    def peek(self):
        if self.is_empty():
            print("Error: Stack is empty")
            return None
        return self.top.value

    def is_empty(self):
        return self.top is None

    def display(self):
        current = self.top
        while current:
            print(current.value, end=" -> ")
            current = current.next
        print("None")


# Queue Implementation (using Circular Array)
class MyQueue:
    def __init__(self, size):
        self.queue = [None] * size
        self.size = size
        self.front = -1
        self.rear = -1

    def enqueue(self, value):
        if (self.rear + 1) % self.size == self.front:
            print("Error: Queue is full")
            return
        if self.front == -1:
            self.front = 0
        self.rear = (self.rear + 1) % self.size
        self.queue[self.rear] = value

    def dequeue(self):
        if self.is_empty():
            print("Error: Queue is empty")
            return None
        value = self.queue[self.front]
        if self.front == self.rear:  # Queue becomes empty
            self.front = -1
            self.rear = -1
        else:
            self.front = (self.front + 1) % self.size
        return value

    def is_empty(self):
        return self.front == -1

    def display(self):
        if self.is_empty():
            print("Queue is empty")
            return
        i = self.front
        while True:
            print(self.queue[i], end=" -> ")
            if i == self.rear:
                break
            i = (i + 1) % self.size
        print("None")


# Singly Linked List Implementation
class ListNode:
    def __init__(self, value):
        self.value = value
        self.next = None


class MyLinkedList:
    def __init__(self):
        self.head = None

    def insert(self, value):
        new_node = ListNode(value)
        if self.head is None:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node

    def delete(self, value):
        if self.head is None:
            print("Error: List is empty")
            return
        if self.head.value == value:
            self.head = self.head.next
            return
        current = self.head
        while current.next and current.next.value != value:
            current = current.next
        if current.next:
            current.next = current.next.next

    def display(self):
        current = self.head
        while current:
            print(current.value, end=" -> ")
            current = current.next
        print("None")


# Rooted Tree Implementation
class TreeNode:
    def __init__(self, value):
        self.value = value
        self.children = []

    def add_child(self, child_node):
        self.children.append(child_node)

    def display(self, level=0):
        print(" " * level * 4 + str(self.value))
        for child in self.children:
            child.display(level + 1)


# Example Usage
if __name__ == "__main__":
    print("Array Example:")
    arr = MyArray(5)
    arr.insert(0, 10)
    arr.insert(1, 20)
    arr.insert(2, 30)
    arr.delete(1)
    arr.display()

    print("\nMatrix Example:")
    mat = MyMatrix(2, 2)
    mat.insert(0, 0, 5)
    mat.insert(1, 1, 10)
    mat.display()

    print("\nStack Example:")
    stack = MyStack()
    stack.push(10)
    stack.push(20)
    stack.push(30)
    print("Pop:", stack.pop())
    stack.display()

    print("\nQueue Example:")
    queue = MyQueue(3)
    queue.enqueue(5)
    queue.enqueue(10)
    queue.enqueue(15)
    print("Dequeue:", queue.dequeue())
    queue.display()

    print("\nLinked List Example:")
    linked_list = MyLinkedList()
    linked_list.insert(1)
    linked_list.insert(2)
    linked_list.insert(3)
    linked_list.delete(2)
    linked_list.display()

    print("\nRooted Tree Example:")
    root = TreeNode("Root")
    child1 = TreeNode("Child 1")
    child2 = TreeNode("Child 2")
    root.add_child(child1)
    root.add_child(child2)
    child1.add_child(TreeNode("Grandchild 1"))
    root.display()